# Generated by Django 5.1.5 on 2025-03-26 06:16

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentication', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DailyQuest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('quest_type', models.CharField(choices=[('steps', 'Steps'), ('exercise', 'Exercise'), ('workout', 'Workout')], max_length=50)),
                ('target_value', models.PositiveIntegerField()),
                ('xp_reward', models.PositiveIntegerField()),
                ('available_from', models.DateField(blank=True, null=True)),
                ('available_until', models.DateField(blank=True, null=True)),
                ('recurrence_pattern', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('icon', models.CharField(max_length=50)),
                ('requirement_type', models.CharField(max_length=100)),
                ('requirement_value', models.PositiveIntegerField()),
                ('tier', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold')], max_length=20)),
                ('xp_reward', models.PositiveIntegerField()),
                ('previous_tier_achievement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.achievement')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('achievement', 'Achievement'), ('quest', 'Quest'), ('workout', 'Workout'), ('friend', 'Friend')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('action_url', models.URLField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='authentication.user')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_weight', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('goal_weight', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('daily_calorie_goal', models.PositiveIntegerField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('bio', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='authentication.user')),
            ],
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('base_xp_reward', models.PositiveIntegerField(default=10)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('video_url', models.URLField(blank=True, null=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exercises', to='api.workoutcategory')),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_workout_plans', to='authentication.user')),
            ],
        ),
        migrations.CreateModel(
            name='UserWorkoutSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_time', models.DateTimeField()),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('notification_preference', models.CharField(blank=True, max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workout_schedules', to='authentication.user')),
                ('workout_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.workoutplan')),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutPlanExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_position', models.PositiveIntegerField()),
                ('sets', models.PositiveIntegerField()),
                ('reps', models.PositiveIntegerField()),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.exercise')),
                ('workout_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plan_exercises', to='api.workoutplan')),
            ],
            options={
                'ordering': ['order_position'],
            },
        ),
        migrations.CreateModel(
            name='WorkoutSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('total_xp_earned', models.PositiveIntegerField(default=0)),
                ('completion_status', models.CharField(max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workout_sessions', to='authentication.user')),
                ('workout_plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.workoutplan')),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutSessionExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sets_completed', models.PositiveIntegerField()),
                ('reps_completed', models.PositiveIntegerField()),
                ('weight_used', models.FloatField(blank=True, null=True)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('xp_earned', models.PositiveIntegerField(default=0)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.exercise')),
                ('workout_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_exercises', to='api.workoutsession')),
            ],
        ),
        migrations.CreateModel(
            name='StepsTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tracking_day', models.DateField()),
                ('step_count', models.PositiveIntegerField()),
                ('distance_km', models.FloatField()),
                ('calories_burned', models.PositiveIntegerField()),
                ('data_source', models.CharField(max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps_tracking', to='authentication.user')),
            ],
            options={
                'unique_together': {('user', 'tracking_day')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievementProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_progress', models.PositiveIntegerField(default=0)),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('is_claimed', models.BooleanField(default=False)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievement_progress', to='authentication.user')),
            ],
            options={
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='UserDailyQuest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_date', models.DateField()),
                ('current_progress', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='not_started', max_length=20)),
                ('xp_claimed', models.BooleanField(default=False)),
                ('daily_quest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.dailyquest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_quests', to='authentication.user')),
            ],
            options={
                'unique_together': {('user', 'daily_quest', 'assigned_date')},
            },
        ),
        migrations.CreateModel(
            name='UserFriend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('is_visible', models.BooleanField(default=True)),
                ('friend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='added_by', to='authentication.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='added_friends', to='authentication.user')),
            ],
            options={
                'unique_together': {('user', 'friend')},
            },
        ),
        migrations.CreateModel(
            name='WeightLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_date', models.DateField()),
                ('weight', models.FloatField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weight_logs', to='authentication.user')),
            ],
            options={
                'unique_together': {('user', 'log_date')},
            },
        ),
    ]
